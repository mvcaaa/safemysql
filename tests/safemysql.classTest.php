<?php

require_once __DIR__ . '/../safemysql.class.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-04 at 07:42:48.
 */
class SafeMSyQLTest extends PHPUnit_Framework_TestCase
{

	/**
	 * @var $db SafeMSyQL
	 */
	protected $db;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->db = new SafeMSyQL(array(
			'user' => 'root',
			'pass' => 'SuperVGA256',
			'db' => 'test',
			'host' => '192.168.56.101',
			'charset' => 'utf8',
			'selectOption' => 'SQL_CALC_FOUND_ROWS'
		));

		$this->db->query('DROP TABLE IF EXISTS t1;');
		$this->db->query('CREATE TABLE t1 (id INT AUTO_INCREMENT, value VARCHAR(25), PRIMARY KEY (id));');

	}

	/**
	 * @covers SafeMySQL::setSelectSqlCalcFoundRows
	 */
	public function testsetSelectSqlCalcFoundRows()
	{
		$this->assertEquals(
			$this->db->setSelectSqlCalcFoundRows(true), true
		);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		$this->db->query('DROP TABLE IF EXISTS t1;');
		unset($this->db);
	}

	/**
	 * @covers SafeMySQL::query
	 */
	public function testQuery()
	{
		$this->assertInstanceOf(
			'mysqli_result', $this->db->query('SELECT * FROM t1')
		);
	}

	/**
	 * @covers SafeMySQL::affectedRows
	 */
	public function testAffectedRows()
	{
		$this->db->query('TRUNCATE t1');

		$this->db->query('SELECT * FROM t1');
		$this->assertEquals(
			$this->db->AffectedRows(), 0
		);

		$this->db->query("INSERT INTO t1 VALUES (1, 'test')");
		$this->db->query('SELECT * FROM t1');
		$this->assertEquals(
			$this->db->AffectedRows(), 1
		);

	}

	/**
	 * @covers SafeMySQL::insertId
	 */
	public function testInsertId()
	{
		$this->db->query('TRUNCATE t1');
		$this->db->query("INSERT INTO t1 VALUES (0, 'test')");
		$this->assertSame(
			$this->db->InsertId(), 1
		);
		$this->db->query("INSERT INTO t1 VALUES (0, 'test2')");
		$this->assertSame(
			$this->db->InsertId(), 2
		);
		$this->db->query("INSERT INTO t1 VALUES (0, 'test2')");
		$this->assertSame(
			$this->db->InsertId(), 3
		);
	}

	/**
	 * @covers SafeMySQL::getOne
	 */
	public function testGetOne()
	{
		$this->truncateAndFill();

		$this->assertSame(
			$this->db->getOne("SELECT value FROM t1 WHERE value='test'"), "test"
		);
	}

	/**
	 * @covers SafeMySQL::getRow
	 */
	public function testGetRow()
	{
		$this->truncateAndFill();

		$this->assertSame(
			$this->db->GetRow("SELECT * FROM t1"), array('id' => '1', 'value' => 'test')
		);

	}

	/**
	 * @covers SafeMySQL::getCol
	 */
	public function testGetCol()
	{
		$this->truncateAndFill();

		$this->assertSame(
			$this->db->GetCol("SELECT id FROM t1 WHERE value = ?s", "test"), array('1', '5')
		);
	}

	/**
	 * @covers SafeMySQL::getAll
	 */
	public function testGetAll()
	{
		$this->truncateAndFill();

		$this->assertSame(
			$this->db->GetAll("SELECT * FROM t1 WHERE value = ?s LIMIT ?i, ?i", "test", 0, 1),
			array(
				array('id' => '1', 'value' => 'test')
			)
		);

	}

	/**
	 * @covers SafeMySQL::getInd
	 */
	public function testGetInd()
	{
		$this->truncateAndFill();

		$this->assertSame(
			$this->db->GetInd('id', "SELECT * FROM t1 WHERE value = ?s", "test"),
			array(
				1 => array('id' => '1', 'value' => 'test'),
				5 => array('id' => '5', 'value' => 'test')
			)
		);

	}

	/**
	 * @covers SafeMySQL::getIndCol
	 */
	public function testGetIndCol()
	{
		$this->truncateAndFill();

		$this->assertSame(
			$this->db->GetIndCol('id', "SELECT id FROM t1 WHERE value = ?s", "test"),
			array(
				1 => false,
				5 => false
			)
		);

	}


	/**
	 * @covers SafeMySQL::parse
	 */
	public function testParse()
	{
		$this->assertSame(
			$this->db->parse("SELECT id FROM t1 WHERE value = ?s", "test"),
			"SELECT id FROM t1 WHERE value = 'test'"
		);

	}

	/**
	 * @covers SafeMySQL::queryFiltered
	 */
	public function testQueryFiltered()
	{
		$this->truncateAndFill();

		$input_arr = array(
			'id' => 4,
			'value' => 'test',
			'fake' => 'asdf'
		);

		$allowed = array('id', 'value');

		$this->assertInstanceOf('mysqli_result',
			$this->db->queryFiltered($input_arr, $allowed,
				"SELECT id FROM t1 WHERE id = ?s")
		);

		$allowed = array('value');
		$this->assertInstanceOf('mysqli_result',
			$this->db->queryFiltered($input_arr, $allowed,
				"SELECT id FROM t1 WHERE value = ?s")
		);

	}

	/**
	 * @covers SafeMySQL::lastQuery
	 */
	public function testLastQuery()
	{
		$this->truncateAndFill();

		$this->assertSame(
			$this->db->LastQuery(),
			"INSERT INTO t1 VALUES (0, 'test')"
		);

	}

	/**
	 * @covers SafeMySQL::getStats
	 */
	public function testGetStats()
	{
		$this->truncateAndFill();

		$this->assertInternalType('array',
			$this->db->GetStats()
		);
	}

	/**
	 * @covers SafeMySQL::getFoundRows
	 */
	public function testgetFoundRows()
	{
		$this->truncateAndFill();

		$this->db->GetAll("SELECT * FROM t1 WHERE value = ?s LIMIT ?i, ?i", "test", 0, 1);
		$this->assertEquals(
			$this->db->getFoundRows(), 2
		);

		$this->db->GetAll("SELECT * FROM t1 WHERE value = ?s", "test");
		$this->assertEquals(
			$this->db->getFoundRows(), 2
		);

		// Set option to not ignore LIMITS in selects
		$this->db->setSelectSqlCalcFoundRows(false);
		$this->db->GetAll("SELECT * FROM t1 WHERE value = ?s LIMIT ?i, ?i", "test", 0, 1);
		$this->assertEquals(
			$this->db->getFoundRows(), 1
		);
	}

	private function truncateAndFill()
	{
		$this->db->query("TRUNCATE t1");
		$this->db->query("INSERT INTO t1 VALUES (0, 'test')");
		$this->db->query("INSERT INTO t1 VALUES (0, 'test2')");
		$this->db->query("INSERT INTO t1 VALUES (0, 'test3')");
		$this->db->query("INSERT INTO t1 VALUES (0, 'test4')");
		$this->db->query("INSERT INTO t1 VALUES (0, 'test')");
	}

}
